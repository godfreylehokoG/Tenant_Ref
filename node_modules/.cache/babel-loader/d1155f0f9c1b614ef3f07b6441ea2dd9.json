{"ast":null,"code":"// utils/authUtils.js\nconst fs=require('fs');const userFilePath='./users.txt';export const registerUser=(email,password)=>{// Check if the user already exists\nconst users=readUsersFile();if(users.find(user=>user.email===email)){throw new Error('User already exists');}// Create a new user object\nconst newUser={email,password};// Append the new user to the file\nfs.appendFileSync(userFilePath,JSON.stringify(newUser)+'\\n');return newUser;};export const loginUser=(email,password)=>{// Check if the user exists and the password is correct\nconst users=readUsersFile();const user=users.find(user=>user.email===email&&user.password===password);if(!user){throw new Error('Invalid email or password');}return user;};const readUsersFile=()=>{try{// Read the file and parse its content\nconst content=fs.readFileSync(userFilePath,'utf-8');const lines=content.trim().split('\\n');const users=lines.map(line=>JSON.parse(line));return users;}catch(error){// If the file doesn't exist, return an empty array\nreturn[];}};","map":{"version":3,"names":["fs","require","userFilePath","registerUser","email","password","users","readUsersFile","find","user","Error","newUser","appendFileSync","JSON","stringify","loginUser","content","readFileSync","lines","trim","split","map","line","parse","error"],"sources":["/Users/godfrey/Desktop/Tenant_Ref/Tenant_Ref/src/utils/authUtils.js"],"sourcesContent":["// utils/authUtils.js\nconst fs = require('fs');\n\nconst userFilePath = './users.txt';\n\nexport const registerUser = (email, password) => {\n  // Check if the user already exists\n  const users = readUsersFile();\n  if (users.find(user => user.email === email)) {\n    throw new Error('User already exists');\n  }\n\n  // Create a new user object\n  const newUser = { email, password };\n  \n  // Append the new user to the file\n  fs.appendFileSync(userFilePath, JSON.stringify(newUser) + '\\n');\n\n  return newUser;\n};\n\nexport const loginUser = (email, password) => {\n  // Check if the user exists and the password is correct\n  const users = readUsersFile();\n  const user = users.find(user => user.email === email && user.password === password);\n\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n\n  return user;\n};\n\nconst readUsersFile = () => {\n  try {\n    // Read the file and parse its content\n    const content = fs.readFileSync(userFilePath, 'utf-8');\n    const lines = content.trim().split('\\n');\n    const users = lines.map(line => JSON.parse(line));\n    return users;\n  } catch (error) {\n    // If the file doesn't exist, return an empty array\n    return [];\n  }\n};\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,EAAE,CAAGC,OAAO,CAAC,IAAI,CAAC,CAExB,KAAM,CAAAC,YAAY,CAAG,aAAa,CAElC,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAACC,KAAK,CAAEC,QAAQ,GAAK,CAC/C;AACA,KAAM,CAAAC,KAAK,CAAGC,aAAa,CAAC,CAAC,CAC7B,GAAID,KAAK,CAACE,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACL,KAAK,GAAKA,KAAK,CAAC,CAAE,CAC5C,KAAM,IAAI,CAAAM,KAAK,CAAC,qBAAqB,CAAC,CACxC,CAEA;AACA,KAAM,CAAAC,OAAO,CAAG,CAAEP,KAAK,CAAEC,QAAS,CAAC,CAEnC;AACAL,EAAE,CAACY,cAAc,CAACV,YAAY,CAAEW,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAG,IAAI,CAAC,CAE/D,MAAO,CAAAA,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAI,SAAS,CAAGA,CAACX,KAAK,CAAEC,QAAQ,GAAK,CAC5C;AACA,KAAM,CAAAC,KAAK,CAAGC,aAAa,CAAC,CAAC,CAC7B,KAAM,CAAAE,IAAI,CAAGH,KAAK,CAACE,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACL,KAAK,GAAKA,KAAK,EAAIK,IAAI,CAACJ,QAAQ,GAAKA,QAAQ,CAAC,CAEnF,GAAI,CAACI,IAAI,CAAE,CACT,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA,MAAO,CAAAD,IAAI,CACb,CAAC,CAED,KAAM,CAAAF,aAAa,CAAGA,CAAA,GAAM,CAC1B,GAAI,CACF;AACA,KAAM,CAAAS,OAAO,CAAGhB,EAAE,CAACiB,YAAY,CAACf,YAAY,CAAE,OAAO,CAAC,CACtD,KAAM,CAAAgB,KAAK,CAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CACxC,KAAM,CAAAd,KAAK,CAAGY,KAAK,CAACG,GAAG,CAACC,IAAI,EAAIT,IAAI,CAACU,KAAK,CAACD,IAAI,CAAC,CAAC,CACjD,MAAO,CAAAhB,KAAK,CACd,CAAE,MAAOkB,KAAK,CAAE,CACd;AACA,MAAO,EAAE,CACX,CACF,CAAC"},"metadata":{},"sourceType":"module"}