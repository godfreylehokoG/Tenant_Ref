{"ast":null,"code":"// utils/authUtils.js\nconst fs = require('fs');\nconst userFilePath = './users.txt';\nexport const registerUser = (email, password) => {\n  // Check if the user already exists\n  const users = readUsersFile();\n  if (users.find(user => user.email === email)) {\n    throw new Error('User already exists');\n  }\n\n  // Create a new user object\n  const newUser = {\n    email,\n    password\n  };\n\n  // Append the new user to the file\n  fs.appendFileSync(userFilePath, JSON.stringify(newUser) + '\\n');\n  return newUser;\n};\nexport const loginUser = (email, password) => {\n  // Check if the user exists and the password is correct\n  const users = readUsersFile();\n  const user = users.find(user => user.email === email && user.password === password);\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n  return user;\n};\nconst readUsersFile = () => {\n  try {\n    // Read the file and parse its content\n    const content = fs.readFileSync(userFilePath, 'utf-8');\n    const lines = content.trim().split('\\n');\n    const users = lines.map(line => JSON.parse(line));\n    return users;\n  } catch (error) {\n    // If the file doesn't exist, return an empty array\n    return [];\n  }\n};","map":{"version":3,"names":["fs","require","userFilePath","registerUser","email","password","users","readUsersFile","find","user","Error","newUser","appendFileSync","JSON","stringify","loginUser","content","readFileSync","lines","trim","split","map","line","parse","error"],"sources":["/Users/godfrey/Desktop/Tenant_Ref/Tenant_Ref/src/utils/authUtils.js"],"sourcesContent":["// utils/authUtils.js\nconst fs = require('fs');\n\nconst userFilePath = './users.txt';\n\nexport const registerUser = (email, password) => {\n  // Check if the user already exists\n  const users = readUsersFile();\n  if (users.find(user => user.email === email)) {\n    throw new Error('User already exists');\n  }\n\n  // Create a new user object\n  const newUser = { email, password };\n  \n  // Append the new user to the file\n  fs.appendFileSync(userFilePath, JSON.stringify(newUser) + '\\n');\n\n  return newUser;\n};\n\nexport const loginUser = (email, password) => {\n  // Check if the user exists and the password is correct\n  const users = readUsersFile();\n  const user = users.find(user => user.email === email && user.password === password);\n\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n\n  return user;\n};\n\nconst readUsersFile = () => {\n  try {\n    // Read the file and parse its content\n    const content = fs.readFileSync(userFilePath, 'utf-8');\n    const lines = content.trim().split('\\n');\n    const users = lines.map(line => JSON.parse(line));\n    return users;\n  } catch (error) {\n    // If the file doesn't exist, return an empty array\n    return [];\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AAExB,MAAMC,YAAY,GAAG,aAAa;AAElC,OAAO,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC/C;EACA,MAAMC,KAAK,GAAGC,aAAa,CAAC,CAAC;EAC7B,IAAID,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,KAAK,KAAKA,KAAK,CAAC,EAAE;IAC5C,MAAM,IAAIM,KAAK,CAAC,qBAAqB,CAAC;EACxC;;EAEA;EACA,MAAMC,OAAO,GAAG;IAAEP,KAAK;IAAEC;EAAS,CAAC;;EAEnC;EACAL,EAAE,CAACY,cAAc,CAACV,YAAY,EAAEW,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,GAAG,IAAI,CAAC;EAE/D,OAAOA,OAAO;AAChB,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGA,CAACX,KAAK,EAAEC,QAAQ,KAAK;EAC5C;EACA,MAAMC,KAAK,GAAGC,aAAa,CAAC,CAAC;EAC7B,MAAME,IAAI,GAAGH,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,KAAK,KAAKA,KAAK,IAAIK,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;EAEnF,IAAI,CAACI,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,OAAOD,IAAI;AACb,CAAC;AAED,MAAMF,aAAa,GAAGA,CAAA,KAAM;EAC1B,IAAI;IACF;IACA,MAAMS,OAAO,GAAGhB,EAAE,CAACiB,YAAY,CAACf,YAAY,EAAE,OAAO,CAAC;IACtD,MAAMgB,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;IACxC,MAAMd,KAAK,GAAGY,KAAK,CAACG,GAAG,CAACC,IAAI,IAAIT,IAAI,CAACU,KAAK,CAACD,IAAI,CAAC,CAAC;IACjD,OAAOhB,KAAK;EACd,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACd;IACA,OAAO,EAAE;EACX;AACF,CAAC"},"metadata":{},"sourceType":"module"}